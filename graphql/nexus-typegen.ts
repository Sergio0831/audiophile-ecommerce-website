/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Category: { // root type
    id: string; // String!
    image: string; // String!
    name: string; // String!
  }
  Gallery: { // root type
    first?: NexusGenRootTypes['Image'] | null; // Image
    second?: NexusGenRootTypes['Image'] | null; // Image
    third?: NexusGenRootTypes['Image'] | null; // Image
  }
  Image: { // root type
    desktop?: string | null; // String
    mobile?: string | null; // String
    tablet?: string | null; // String
  }
  Includes: { // root type
    item?: string | null; // String
    quantity?: number | null; // Int
  }
  Others: { // root type
    categoryName?: string | null; // String
    image?: NexusGenRootTypes['Image'] | null; // Image
    name?: string | null; // String
    slug?: string | null; // String
  }
  Product: { // root type
    categoryImage: NexusGenRootTypes['Image']; // Image!
    categoryName: string; // String!
    description: string; // String!
    features: string; // String!
    gallery: NexusGenRootTypes['Gallery']; // Gallery!
    id: string; // String!
    image: NexusGenRootTypes['Image']; // Image!
    includes: Array<NexusGenRootTypes['Includes'] | null>; // [Includes]!
    name: string; // String!
    new: boolean; // Boolean!
    others: Array<NexusGenRootTypes['Others'] | null>; // [Others]!
    price: number; // Int!
    slug: string; // String!
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Category: { // field return type
    id: string; // String!
    image: string; // String!
    name: string; // String!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
  }
  Gallery: { // field return type
    first: NexusGenRootTypes['Image'] | null; // Image
    second: NexusGenRootTypes['Image'] | null; // Image
    third: NexusGenRootTypes['Image'] | null; // Image
  }
  Image: { // field return type
    desktop: string | null; // String
    mobile: string | null; // String
    tablet: string | null; // String
  }
  Includes: { // field return type
    item: string | null; // String
    quantity: number | null; // Int
  }
  Others: { // field return type
    categoryName: string | null; // String
    image: NexusGenRootTypes['Image'] | null; // Image
    name: string | null; // String
    slug: string | null; // String
  }
  Product: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    categoryImage: NexusGenRootTypes['Image']; // Image!
    categoryName: string; // String!
    description: string; // String!
    features: string; // String!
    gallery: NexusGenRootTypes['Gallery']; // Gallery!
    id: string; // String!
    image: NexusGenRootTypes['Image']; // Image!
    includes: Array<NexusGenRootTypes['Includes'] | null>; // [Includes]!
    name: string; // String!
    new: boolean; // Boolean!
    others: Array<NexusGenRootTypes['Others'] | null>; // [Others]!
    price: number; // Int!
    slug: string; // String!
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null>; // [Category]!
    category: NexusGenRootTypes['Category']; // Category!
    product: NexusGenRootTypes['Product']; // Product!
    products: Array<NexusGenRootTypes['Product'] | null>; // [Product]!
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    id: 'String'
    image: 'String'
    name: 'String'
    products: 'Product'
  }
  Gallery: { // field return type name
    first: 'Image'
    second: 'Image'
    third: 'Image'
  }
  Image: { // field return type name
    desktop: 'String'
    mobile: 'String'
    tablet: 'String'
  }
  Includes: { // field return type name
    item: 'String'
    quantity: 'Int'
  }
  Others: { // field return type name
    categoryName: 'String'
    image: 'Image'
    name: 'String'
    slug: 'String'
  }
  Product: { // field return type name
    category: 'Category'
    categoryImage: 'Image'
    categoryName: 'String'
    description: 'String'
    features: 'String'
    gallery: 'Gallery'
    id: 'String'
    image: 'Image'
    includes: 'Includes'
    name: 'String'
    new: 'Boolean'
    others: 'Others'
    price: 'Int'
    slug: 'String'
  }
  Query: { // field return type name
    categories: 'Category'
    category: 'Category'
    product: 'Product'
    products: 'Product'
  }
}

export interface NexusGenArgTypes {
  Query: {
    category: { // args
      name: string; // String!
    }
    product: { // args
      slug: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}